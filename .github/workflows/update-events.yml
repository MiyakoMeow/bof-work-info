name: Update BMS Events

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-matrix:
    name: Prepare event matrix
    runs-on: ubuntu-latest
    outputs:
      keys: ${{ steps.build-matrix.outputs.keys }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build matrix keys from events.json
        id: build-matrix
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f events.json ]; then
            echo "events.json not found at repo root" >&2
            exit 1
          fi
          keys=$(jq -c '[.events[] | .key]' events.json)
          if [ -z "$keys" ] || [ "$keys" = "null" ] || [ "$keys" = "[]" ]; then
            echo "No events defined in events.json" >&2
            exit 1
          fi
          echo "keys=$keys" >> "$GITHUB_OUTPUT"

  update-event:
    name: Update ${{ matrix.event_key }}
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        event_key: ${{ fromJSON(needs.prepare-matrix.outputs.keys) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve event URL
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          url=$(jq -r --arg KEY "${{ matrix.event_key }}" '.events[] | select(.key==$KEY) | .url' events.json)
          if [ -z "$url" ] || [ "$url" = "null" ]; then
            echo "URL not found for key=${{ matrix.event_key }}" >&2
            exit 1
          fi
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo build
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          workspaces: |
            . -> target

      - name: Build
        run: cargo build --release

      - name: Fetch event data
        run: |
          mkdir -p events
          echo "${{ steps.resolve.outputs.url }}" | cargo run --release -- --stdin --output "events/${{ matrix.event_key }}.toml" --log-level info

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "No changes detected for ${{ matrix.event_key }}"
            echo "has-changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected for ${{ matrix.event_key }}"
            echo "has-changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        if: steps.check-changes.outputs.has-changes == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          commit-message: "chore(events): update ${{ matrix.event_key }} data"
          branch: "chore/update-${{ matrix.event_key }}"
          title: "chore(events): update ${{ matrix.event_key }} data"
          body: |
            Automated update for `${{ matrix.event_key }}`
            Source: `${{ steps.resolve.outputs.url }}`
          add-paths: |
            events/${{ matrix.event_key }}.toml
          labels: |
            automated
            event:${{ matrix.event_key }}
          delete-branch: true
          signoff: false
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

      - name: Enable auto-merge
        if: steps.check-changes.outputs.has-changes == 'true' && steps.cpr.outputs.pull-request-number
        id: enable-automerge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: merge
